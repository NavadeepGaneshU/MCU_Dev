
AT32_BtnGame.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000206  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000027a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800060  00800060  0000027a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000027a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000759  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005f8  00000000  00000000  00000a71  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000036c  00000000  00000000  00001069  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  000013d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ac  00000000  00000000  0000141c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000100  00000000  00000000  000017c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000018c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 37       	cpi	r26, 0x70	; 112
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <main>
  74:	0c 94 01 01 	jmp	0x202	; 0x202 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <ProcessPressedButton>:
    }
}
 
void ProcessPressedButton(int ButtonPressed)
{
	pressed_confidence_level[ButtonPressed] ++;
  7c:	fc 01       	movw	r30, r24
  7e:	ee 0f       	add	r30, r30
  80:	ff 1f       	adc	r31, r31
  82:	e0 5a       	subi	r30, 0xA0	; 160
  84:	ff 4f       	sbci	r31, 0xFF	; 255
  86:	20 81       	ld	r18, Z
  88:	31 81       	ldd	r19, Z+1	; 0x01
  8a:	2f 5f       	subi	r18, 0xFF	; 255
  8c:	3f 4f       	sbci	r19, 0xFF	; 255
  8e:	31 83       	std	Z+1, r19	; 0x01
  90:	20 83       	st	Z, r18
	if (pressed_confidence_level[ButtonPressed] > 500)
  92:	25 3f       	cpi	r18, 0xF5	; 245
  94:	31 40       	sbci	r19, 0x01	; 1
  96:	0c f4       	brge	.+2      	; 0x9a <ProcessPressedButton+0x1e>
  98:	7b c0       	rjmp	.+246    	; 0x190 <ProcessPressedButton+0x114>
	{
		if (pressed[ButtonPressed] == 0)
  9a:	fc 01       	movw	r30, r24
  9c:	ee 0f       	add	r30, r30
  9e:	ff 1f       	adc	r31, r31
  a0:	e8 59       	subi	r30, 0x98	; 152
  a2:	ff 4f       	sbci	r31, 0xFF	; 255
  a4:	20 81       	ld	r18, Z
  a6:	31 81       	ldd	r19, Z+1	; 0x01
  a8:	23 2b       	or	r18, r19
  aa:	09 f0       	breq	.+2      	; 0xae <ProcessPressedButton+0x32>
  ac:	6a c0       	rjmp	.+212    	; 0x182 <ProcessPressedButton+0x106>
		{
			pressed[ButtonPressed] = 1;
  ae:	fc 01       	movw	r30, r24
  b0:	ee 0f       	add	r30, r30
  b2:	ff 1f       	adc	r31, r31
  b4:	e8 59       	subi	r30, 0x98	; 152
  b6:	ff 4f       	sbci	r31, 0xFF	; 255
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	31 83       	std	Z+1, r19	; 0x01
  be:	20 83       	st	Z, r18
			//PORTB |= 1 << LEDnumber[ButtonPressed];
			if(ButtonPressed == 0) PORTB |= 1 << LEDnumber[ButtonPressed];
  c0:	00 97       	sbiw	r24, 0x00	; 0
  c2:	71 f4       	brne	.+28     	; 0xe0 <ProcessPressedButton+0x64>
  c4:	48 b3       	in	r20, 0x18	; 24
  c6:	fc 01       	movw	r30, r24
  c8:	ee 0f       	add	r30, r30
  ca:	ff 1f       	adc	r31, r31
  cc:	e4 59       	subi	r30, 0x94	; 148
  ce:	ff 4f       	sbci	r31, 0xFF	; 255
  d0:	00 80       	ld	r0, Z
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <ProcessPressedButton+0x5c>
  d4:	22 0f       	add	r18, r18
  d6:	33 1f       	adc	r19, r19
  d8:	0a 94       	dec	r0
  da:	e2 f7       	brpl	.-8      	; 0xd4 <ProcessPressedButton+0x58>
  dc:	24 2b       	or	r18, r20
  de:	28 bb       	out	0x18, r18	; 24
			if(ButtonPressed == 1) PORTD |= 1 << LEDnumber[ButtonPressed];
  e0:	81 30       	cpi	r24, 0x01	; 1
  e2:	91 05       	cpc	r25, r1
  e4:	81 f4       	brne	.+32     	; 0x106 <ProcessPressedButton+0x8a>
  e6:	42 b3       	in	r20, 0x12	; 18
  e8:	fc 01       	movw	r30, r24
  ea:	ee 0f       	add	r30, r30
  ec:	ff 1f       	adc	r31, r31
  ee:	e4 59       	subi	r30, 0x94	; 148
  f0:	ff 4f       	sbci	r31, 0xFF	; 255
  f2:	21 e0       	ldi	r18, 0x01	; 1
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	00 80       	ld	r0, Z
  f8:	02 c0       	rjmp	.+4      	; 0xfe <ProcessPressedButton+0x82>
  fa:	22 0f       	add	r18, r18
  fc:	33 1f       	adc	r19, r19
  fe:	0a 94       	dec	r0
 100:	e2 f7       	brpl	.-8      	; 0xfa <ProcessPressedButton+0x7e>
 102:	24 2b       	or	r18, r20
 104:	22 bb       	out	0x12, r18	; 18
			LEDnumber[ButtonPressed] ++;
 106:	fc 01       	movw	r30, r24
 108:	ee 0f       	add	r30, r30
 10a:	ff 1f       	adc	r31, r31
 10c:	e4 59       	subi	r30, 0x94	; 148
 10e:	ff 4f       	sbci	r31, 0xFF	; 255
 110:	20 81       	ld	r18, Z
 112:	31 81       	ldd	r19, Z+1	; 0x01
 114:	2f 5f       	subi	r18, 0xFF	; 255
 116:	3f 4f       	sbci	r19, 0xFF	; 255
 118:	31 83       	std	Z+1, r19	; 0x01
 11a:	20 83       	st	Z, r18
			if(LEDnumber[ButtonPressed] > 6)
 11c:	27 30       	cpi	r18, 0x07	; 7
 11e:	31 05       	cpc	r19, r1
 120:	14 f5       	brge	.+68     	; 0x166 <ProcessPressedButton+0xea>
 122:	2f c0       	rjmp	.+94     	; 0x182 <ProcessPressedButton+0x106>
			{
				//winner and blink all
				for(int i=0; i<10; i++)
				{
					if (ButtonPressed == 0) PORTB = 0b11111111;
 124:	00 97       	sbiw	r24, 0x00	; 0
 126:	11 f4       	brne	.+4      	; 0x12c <ProcessPressedButton+0xb0>
 128:	4f ef       	ldi	r20, 0xFF	; 255
 12a:	48 bb       	out	0x18, r20	; 24
					if (ButtonPressed == 1) PORTD = 0b11111111;
 12c:	81 30       	cpi	r24, 0x01	; 1
 12e:	91 05       	cpc	r25, r1
 130:	11 f4       	brne	.+4      	; 0x136 <ProcessPressedButton+0xba>
 132:	4f ef       	ldi	r20, 0xFF	; 255
 134:	42 bb       	out	0x12, r20	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 136:	e3 ec       	ldi	r30, 0xC3	; 195
 138:	f9 e0       	ldi	r31, 0x09	; 9
 13a:	31 97       	sbiw	r30, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <ProcessPressedButton+0xbe>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <ProcessPressedButton+0xc4>
 140:	00 00       	nop
					_delay_ms(10);
					if (ButtonPressed == 0) PORTB = 0b10000000;
 142:	00 97       	sbiw	r24, 0x00	; 0
 144:	11 f4       	brne	.+4      	; 0x14a <ProcessPressedButton+0xce>
 146:	40 e8       	ldi	r20, 0x80	; 128
 148:	48 bb       	out	0x18, r20	; 24
					if (ButtonPressed == 1) PORTD = 0b10000000;
 14a:	81 30       	cpi	r24, 0x01	; 1
 14c:	91 05       	cpc	r25, r1
 14e:	11 f4       	brne	.+4      	; 0x154 <ProcessPressedButton+0xd8>
 150:	40 e8       	ldi	r20, 0x80	; 128
 152:	42 bb       	out	0x12, r20	; 18
 154:	e3 ec       	ldi	r30, 0xC3	; 195
 156:	f9 e0       	ldi	r31, 0x09	; 9
 158:	31 97       	sbiw	r30, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <ProcessPressedButton+0xdc>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <ProcessPressedButton+0xe2>
 15e:	00 00       	nop
			if(ButtonPressed == 1) PORTD |= 1 << LEDnumber[ButtonPressed];
			LEDnumber[ButtonPressed] ++;
			if(LEDnumber[ButtonPressed] > 6)
			{
				//winner and blink all
				for(int i=0; i<10; i++)
 160:	2f 5f       	subi	r18, 0xFF	; 255
 162:	3f 4f       	sbci	r19, 0xFF	; 255
 164:	02 c0       	rjmp	.+4      	; 0x16a <ProcessPressedButton+0xee>
 166:	20 e0       	ldi	r18, 0x00	; 0
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	2a 30       	cpi	r18, 0x0A	; 10
 16c:	31 05       	cpc	r19, r1
 16e:	d4 f2       	brlt	.-76     	; 0x124 <ProcessPressedButton+0xa8>
					_delay_ms(10);
					if (ButtonPressed == 0) PORTB = 0b10000000;
					if (ButtonPressed == 1) PORTD = 0b10000000;
					_delay_ms(10);
				}
				LEDnumber[0] = 0;
 170:	ec e6       	ldi	r30, 0x6C	; 108
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	11 82       	std	Z+1, r1	; 0x01
 176:	10 82       	st	Z, r1
				LEDnumber[1] = 0;
 178:	13 82       	std	Z+3, r1	; 0x03
 17a:	12 82       	std	Z+2, r1	; 0x02
				
				PORTB = 0b10000000;	//reset all LEDs
 17c:	20 e8       	ldi	r18, 0x80	; 128
 17e:	28 bb       	out	0x18, r18	; 24
				PORTD = 0b10000000;
 180:	22 bb       	out	0x12, r18	; 18
			}
		}
		pressed_confidence_level[ButtonPressed] = 0;
 182:	88 0f       	add	r24, r24
 184:	99 1f       	adc	r25, r25
 186:	fc 01       	movw	r30, r24
 188:	e0 5a       	subi	r30, 0xA0	; 160
 18a:	ff 4f       	sbci	r31, 0xFF	; 255
 18c:	11 82       	std	Z+1, r1	; 0x01
 18e:	10 82       	st	Z, r1
 190:	08 95       	ret

00000192 <ProcessReleasedButton>:
	}
}

void ProcessReleasedButton(int ButtonReleased)
{
	released_confidence_level[ButtonReleased] ++;
 192:	fc 01       	movw	r30, r24
 194:	ee 0f       	add	r30, r30
 196:	ff 1f       	adc	r31, r31
 198:	ec 59       	subi	r30, 0x9C	; 156
 19a:	ff 4f       	sbci	r31, 0xFF	; 255
 19c:	20 81       	ld	r18, Z
 19e:	31 81       	ldd	r19, Z+1	; 0x01
 1a0:	2f 5f       	subi	r18, 0xFF	; 255
 1a2:	3f 4f       	sbci	r19, 0xFF	; 255
 1a4:	31 83       	std	Z+1, r19	; 0x01
 1a6:	20 83       	st	Z, r18
	if (released_confidence_level[ButtonReleased] > 500)
 1a8:	25 3f       	cpi	r18, 0xF5	; 245
 1aa:	31 40       	sbci	r19, 0x01	; 1
 1ac:	64 f0       	brlt	.+24     	; 0x1c6 <ProcessReleasedButton+0x34>
	{
		pressed[ButtonReleased] = 0;
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	fc 01       	movw	r30, r24
 1b4:	e8 59       	subi	r30, 0x98	; 152
 1b6:	ff 4f       	sbci	r31, 0xFF	; 255
 1b8:	11 82       	std	Z+1, r1	; 0x01
 1ba:	10 82       	st	Z, r1
		released_confidence_level[ButtonReleased] = 0;
 1bc:	fc 01       	movw	r30, r24
 1be:	ec 59       	subi	r30, 0x9C	; 156
 1c0:	ff 4f       	sbci	r31, 0xFF	; 255
 1c2:	11 82       	std	Z+1, r1	; 0x01
 1c4:	10 82       	st	Z, r1
 1c6:	08 95       	ret

000001c8 <main>:
int LEDnumber[2];	//which LED should be lit

int main(void)
{
	//initialization area for setting ports, DDRs
	DDRB = 0b01111111;	//7 LED pins on a port
 1c8:	8f e7       	ldi	r24, 0x7F	; 127
 1ca:	87 bb       	out	0x17, r24	; 23
	DDRD = 0b01111111;
 1cc:	81 bb       	out	0x11, r24	; 17
	PORTB = 0b10000000;	//initially all LEDs off(|= << PIN7)
 1ce:	80 e8       	ldi	r24, 0x80	; 128
 1d0:	88 bb       	out	0x18, r24	; 24
	PORTD = 0b10000000;
 1d2:	82 bb       	out	0x12, r24	; 18
	
    while (1) 
    {
		if (bit_is_clear(PINB, 7))
 1d4:	b7 99       	sbic	0x16, 7	; 22
 1d6:	05 c0       	rjmp	.+10     	; 0x1e2 <main+0x1a>
		{
			ProcessPressedButton(0);
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	0e 94 3e 00 	call	0x7c	; 0x7c <ProcessPressedButton>
 1e0:	04 c0       	rjmp	.+8      	; 0x1ea <main+0x22>
		}
		else
		{
			ProcessReleasedButton(0);
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	0e 94 c9 00 	call	0x192	; 0x192 <ProcessReleasedButton>
		}
		if (bit_is_clear(PIND, 7))
 1ea:	87 99       	sbic	0x10, 7	; 16
 1ec:	05 c0       	rjmp	.+10     	; 0x1f8 <main+0x30>
		{
			ProcessPressedButton(1);
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 3e 00 	call	0x7c	; 0x7c <ProcessPressedButton>
 1f6:	ee cf       	rjmp	.-36     	; 0x1d4 <main+0xc>
		}
		else
		{
			ProcessReleasedButton (1);
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	0e 94 c9 00 	call	0x192	; 0x192 <ProcessReleasedButton>
 200:	e9 cf       	rjmp	.-46     	; 0x1d4 <main+0xc>

00000202 <_exit>:
 202:	f8 94       	cli

00000204 <__stop_program>:
 204:	ff cf       	rjmp	.-2      	; 0x204 <__stop_program>
